// CPP_Study.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴
// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
#include <iostream>
using namespace std;

unsigned char flag; //부흐를 없애야 >> 해도 부호비트가 딸려오지않음 ungsigned로 하자

// Constant 상수화, 절대안바뀌는값
// const를 붙였으면 초기값을 반드시 지정함

// 컴파일러 마음대로 데이터가 저장됨(.data에 저장되는지.rodata인지는 컴파일러 맘대로임)
const int AIR = 0; // 상수는 대문자가 국룰
const int STUN = 1;
const int POLY = 2;
const int INVI = 3;


// 전역 변수 : 함수 밖에 변수를 지정 

// [데이터 영역]
// .data (초기값 존재)
int a = 2;

// .bss (초기값 없음)
int b;

// .rodata (read only데이터)
const char* msg = "HelloWorld";

int a;
int b;


int main()
{
	// [스택 영역]
	int c = 3;

#pragma region 비트 연산

	// 비트 단위의 조작이 필요할 경우 사용 : BitFlag

	// ~ : bitwise not: 단일 숫자의 모든 비트를 대상으로, 0 <-> 1을 바꿈

	// & : bitwise and: 두 숫자의 모든 비트 쌍을 대상으로 and(둘다1이면 1 아니면0), 서로 같은지를 바교하는 방법

	// | : bitwise or : 두 숫자의 모든 비트 쌍을 대상으로 or(적어도하나가 1이면 1, 아니면0)

	// ^ : bitwise xor: 두 숫자의 모든 바트 쌍을 대상으로 xor(서로 다르면 1, 같으면0), 
	//					서로같은숫자를 xor하면 0으로 초기화, 같은숫자를 두번 xor하면 복구

	// << : 비트 좌측 이동 : 비트열을 N만큼 왼쪽으로 이동, 좌측 넘치는 비트는 제거되고 우측 비트는 0으로 생성
	//						 *2를 할 때 자주 보임(왼쪽으로 1번에 *2)

	// >> : 비트 우측 이동 : 비트열을 N만큼 오른쪽으로 이동, 우측 넘치는 비트 제거, 좌측 비트는 
	//						 1. 부호 비트가 존재할 경우: 부호 비트가 따라가고 부호를 다시 살려줌
	//						 2. 아니면 0 으로 생성 --> 비트단위조작에는 unsigned 변수를 지정하는게 맘편함

	// 실습: 비트플래그
	// 0b0000 [무적][변이][스턴][에어본]
	//         1000  0100  0010   0001

	// 무적:8
	flag = (1 << INVI); // 0000 0001 -> 0000 1000 이므로 8을 의미함

	// 변이:4를 추가한다 (무적 + 변이)
	flag |= (1 << POLY); // 0000 1000 -> 0000 1100 이므로 무적과 변이가 둘다 걸린 상태

	// 무적인지 확인하기 (다른 상태는 무시함)
	// bitmask: 확인하고자 하는 부분만 빼고 나머지를 다 날려버림
	bool isInvincible = (flag & (1 << INVI)) != 0;

	// 무적이거나 스턴인지 확인하기

	bool stunOrInvincible = ((flag & 0b1010) != 0);
	// bool mask = (1 << 3) | (1 << 1);
	// bool stunOrInvincible = ((flag & mask) != 0) 이 방법도 가능



#pragma endregion


}

