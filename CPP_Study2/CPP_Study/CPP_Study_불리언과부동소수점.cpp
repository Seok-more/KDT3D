// CPP_Study.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴
// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
#include <iostream>
using namespace std;

// 불리언과 실수

// 불리언(boolean) T/F
// 불리언은  al, ah 등의 1byte 정수다(0000 0000). ture = 1, false = 0, 어셈블리에서는 bool이라는 것이 없음
 bool isHighLevel = true; 
 bool isPlayer = true;
 bool isMale = false;

 // 실수 (부동소수점)
 // float, double
 // 3.1415926535
 // .을 유동적으로 움직여서 표현하는 방법
 // 3.14 = 0,314 * 10
 // 1. 정규화 = 0,314 * 10
 // 2. 유효숫자(314) 1 (지수)

 float attackSpeed = 0.639f; // 4byte; 부호(1) 지수(8) 유효숫자(23) = 32bit = 4byte
 double attackSpeed2 = 123.4123; // 8byte; 부호(1) 지수(11) 유효숫자(52) = 64bit = 8byte

 // ex) -3.375라는 값을 저장
// 1) 2진수 변환 = (3) + (0.375) = 0b11 + (0.375)
// 2) 0.375 = (0.5 * 0 ) + (0.25 * 1) + (0.125 * 1) = 0b0.011
// 3) 0b11 + 0b.0.011 = 0b11.011
// 4) 정규화 0b1.1011 * 2^1
// 5) 1(부호가 - 이므로) 1(지수가 1승) 1011(유효숫자)
// 단 지수는 unsigned byte라고 가정하므로 숫자 + 127로 만들어준다
// 6) 결과 : 0b 1 (10000000) (1011000 0000 0000 0000 0000) 4byte; 부호(1) 지수(8) 유효숫자(23) = 32bit

 // 부동소수점은 '근사값', 수가 커질 수록 오차 범위도 매우 커짐
 // 따라서 실수 2개를 == 로 비교하는것은 안좋다. 

 float exSpeed = -3.375f;
 

int main()
{
    

     cout << exSpeed << endl;

}

